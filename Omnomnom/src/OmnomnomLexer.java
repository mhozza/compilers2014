// Generated from Omnomnom.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class OmnomnomLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__14=1, T__13=2, T__12=3, T__11=4, T__10=5, T__9=6, T__8=7, T__7=8, T__6=9, 
		T__5=10, T__4=11, T__3=12, T__2=13, T__1=14, T__0=15, WHILE=16, FOR=17, 
		IF=18, ELIF=19, ELSE=20, WRITE=21, READ=22, RET=23, EQ=24, NE=25, LE=26, 
		GE=27, GT=28, LT=29, ASSIGN=30, INC=31, DEC=32, MUL=33, DIV=34, ADD=35, 
		SUB=36, EXP=37, REM=38, ATTR=39, AND=40, OR=41, NOT=42, PAREN_OPEN=43, 
		PAREN_CLOSE=44, END_LINE=45, END_BLOCK=46, BOOL=47, INT=48, FLOAT=49, 
		NAME=50, STRING=51, WHITESPACE=52, DIGIT=53;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'"
	};
	public static final String[] ruleNames = {
		"T__14", "T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", 
		"T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "WHILE", "FOR", "IF", 
		"ELIF", "ELSE", "WRITE", "READ", "RET", "EQ", "NE", "LE", "GE", "GT", 
		"LT", "ASSIGN", "INC", "DEC", "MUL", "DIV", "ADD", "SUB", "EXP", "REM", 
		"ATTR", "AND", "OR", "NOT", "PAREN_OPEN", "PAREN_CLOSE", "END_LINE", "END_BLOCK", 
		"BOOL", "INT", "FLOAT", "NAME", "STRING", "WHITESPACE", "NUMBER", "DIGIT"
	};


	public OmnomnomLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Omnomnom.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\67\u010e\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3"+
		"\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16"+
		"\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24"+
		"\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31"+
		"\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36"+
		"\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'"+
		"\3\'\3(\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u00e2\n\60\3\61\6\61\u00e5\n\61\r"+
		"\61\16\61\u00e6\3\62\3\62\3\62\7\62\u00ec\n\62\f\62\16\62\u00ef\13\62"+
		"\3\63\6\63\u00f2\n\63\r\63\16\63\u00f3\3\64\3\64\7\64\u00f8\n\64\f\64"+
		"\16\64\u00fb\13\64\3\64\3\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66\7\66\u0106"+
		"\n\66\f\66\16\66\u0109\13\66\5\66\u010b\n\66\3\67\3\67\3\u00f9\28\3\3"+
		"\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21"+
		"!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!"+
		"A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\2m\67\3\2"+
		"\6\4\2C\\c|\5\2\13\f\17\17\"\"\3\2\63;\3\2\62;\u0113\2\3\3\2\2\2\2\5\3"+
		"\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2"+
		"\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3"+
		"\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'"+
		"\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63"+
		"\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2"+
		"?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3"+
		"\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2"+
		"\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2"+
		"e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2m\3\2\2\2\3o\3\2\2\2\5q\3\2\2\2\7s\3"+
		"\2\2\2\tu\3\2\2\2\13w\3\2\2\2\ry\3\2\2\2\17{\3\2\2\2\21}\3\2\2\2\23\177"+
		"\3\2\2\2\25\u0081\3\2\2\2\27\u0083\3\2\2\2\31\u0085\3\2\2\2\33\u0087\3"+
		"\2\2\2\35\u0089\3\2\2\2\37\u008b\3\2\2\2!\u008d\3\2\2\2#\u008f\3\2\2\2"+
		"%\u0091\3\2\2\2\'\u0093\3\2\2\2)\u0096\3\2\2\2+\u0098\3\2\2\2-\u009b\3"+
		"\2\2\2/\u009e\3\2\2\2\61\u00a3\3\2\2\2\63\u00a6\3\2\2\2\65\u00a9\3\2\2"+
		"\2\67\u00ac\3\2\2\29\u00af\3\2\2\2;\u00b1\3\2\2\2=\u00b3\3\2\2\2?\u00b5"+
		"\3\2\2\2A\u00b8\3\2\2\2C\u00bb\3\2\2\2E\u00bd\3\2\2\2G\u00bf\3\2\2\2I"+
		"\u00c1\3\2\2\2K\u00c3\3\2\2\2M\u00c5\3\2\2\2O\u00c7\3\2\2\2Q\u00ca\3\2"+
		"\2\2S\u00cc\3\2\2\2U\u00ce\3\2\2\2W\u00d0\3\2\2\2Y\u00d2\3\2\2\2[\u00d4"+
		"\3\2\2\2]\u00d6\3\2\2\2_\u00e1\3\2\2\2a\u00e4\3\2\2\2c\u00e8\3\2\2\2e"+
		"\u00f1\3\2\2\2g\u00f5\3\2\2\2i\u00fe\3\2\2\2k\u010a\3\2\2\2m\u010c\3\2"+
		"\2\2op\7t\2\2p\4\3\2\2\2qr\7u\2\2r\6\3\2\2\2st\7]\2\2t\b\3\2\2\2uv\7}"+
		"\2\2v\n\3\2\2\2wx\7_\2\2x\f\3\2\2\2yz\7\177\2\2z\16\3\2\2\2{|\7a\2\2|"+
		"\20\3\2\2\2}~\7c\2\2~\22\3\2\2\2\177\u0080\7d\2\2\u0080\24\3\2\2\2\u0081"+
		"\u0082\7f\2\2\u0082\26\3\2\2\2\u0083\u0084\7h\2\2\u0084\30\3\2\2\2\u0085"+
		"\u0086\7i\2\2\u0086\32\3\2\2\2\u0087\u0088\7k\2\2\u0088\34\3\2\2\2\u0089"+
		"\u008a\7n\2\2\u008a\36\3\2\2\2\u008b\u008c\7.\2\2\u008c \3\2\2\2\u008d"+
		"\u008e\7B\2\2\u008e\"\3\2\2\2\u008f\u0090\7%\2\2\u0090$\3\2\2\2\u0091"+
		"\u0092\7A\2\2\u0092&\3\2\2\2\u0093\u0094\7#\2\2\u0094\u0095\7A\2\2\u0095"+
		"(\3\2\2\2\u0096\u0097\7#\2\2\u0097*\3\2\2\2\u0098\u0099\7>\2\2\u0099\u009a"+
		"\7>\2\2\u009a,\3\2\2\2\u009b\u009c\7@\2\2\u009c\u009d\7@\2\2\u009d.\3"+
		"\2\2\2\u009e\u009f\7i\2\2\u009f\u00a0\7i\2\2\u00a0\u00a1\7y\2\2\u00a1"+
		"\u00a2\7r\2\2\u00a2\60\3\2\2\2\u00a3\u00a4\7?\2\2\u00a4\u00a5\7?\2\2\u00a5"+
		"\62\3\2\2\2\u00a6\u00a7\7\61\2\2\u00a7\u00a8\7?\2\2\u00a8\64\3\2\2\2\u00a9"+
		"\u00aa\7>\2\2\u00aa\u00ab\7?\2\2\u00ab\66\3\2\2\2\u00ac\u00ad\7?\2\2\u00ad"+
		"\u00ae\7@\2\2\u00ae8\3\2\2\2\u00af\u00b0\7@\2\2\u00b0:\3\2\2\2\u00b1\u00b2"+
		"\7>\2\2\u00b2<\3\2\2\2\u00b3\u00b4\7?\2\2\u00b4>\3\2\2\2\u00b5\u00b6\7"+
		"-\2\2\u00b6\u00b7\7-\2\2\u00b7@\3\2\2\2\u00b8\u00b9\7/\2\2\u00b9\u00ba"+
		"\7/\2\2\u00baB\3\2\2\2\u00bb\u00bc\7,\2\2\u00bcD\3\2\2\2\u00bd\u00be\7"+
		"\61\2\2\u00beF\3\2\2\2\u00bf\u00c0\7-\2\2\u00c0H\3\2\2\2\u00c1\u00c2\7"+
		"/\2\2\u00c2J\3\2\2\2\u00c3\u00c4\7`\2\2\u00c4L\3\2\2\2\u00c5\u00c6\7\'"+
		"\2\2\u00c6N\3\2\2\2\u00c7\u00c8\7/\2\2\u00c8\u00c9\7@\2\2\u00c9P\3\2\2"+
		"\2\u00ca\u00cb\7(\2\2\u00cbR\3\2\2\2\u00cc\u00cd\7~\2\2\u00cdT\3\2\2\2"+
		"\u00ce\u00cf\7\u0080\2\2\u00cfV\3\2\2\2\u00d0\u00d1\7*\2\2\u00d1X\3\2"+
		"\2\2\u00d2\u00d3\7+\2\2\u00d3Z\3\2\2\2\u00d4\u00d5\7=\2\2\u00d5\\\3\2"+
		"\2\2\u00d6\u00d7\7\60\2\2\u00d7^\3\2\2\2\u00d8\u00d9\7h\2\2\u00d9\u00da"+
		"\7c\2\2\u00da\u00db\7n\2\2\u00db\u00dc\7u\2\2\u00dc\u00e2\7g\2\2\u00dd"+
		"\u00de\7v\2\2\u00de\u00df\7t\2\2\u00df\u00e0\7w\2\2\u00e0\u00e2\7g\2\2"+
		"\u00e1\u00d8\3\2\2\2\u00e1\u00dd\3\2\2\2\u00e2`\3\2\2\2\u00e3\u00e5\5"+
		"m\67\2\u00e4\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6"+
		"\u00e7\3\2\2\2\u00e7b\3\2\2\2\u00e8\u00e9\5k\66\2\u00e9\u00ed\7\60\2\2"+
		"\u00ea\u00ec\5m\67\2\u00eb\u00ea\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb"+
		"\3\2\2\2\u00ed\u00ee\3\2\2\2\u00eed\3\2\2\2\u00ef\u00ed\3\2\2\2\u00f0"+
		"\u00f2\t\2\2\2\u00f1\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f1\3\2"+
		"\2\2\u00f3\u00f4\3\2\2\2\u00f4f\3\2\2\2\u00f5\u00f9\7$\2\2\u00f6\u00f8"+
		"\13\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00fa\3\2\2\2"+
		"\u00f9\u00f7\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u00fd"+
		"\7$\2\2\u00fdh\3\2\2\2\u00fe\u00ff\t\3\2\2\u00ff\u0100\3\2\2\2\u0100\u0101"+
		"\b\65\2\2\u0101j\3\2\2\2\u0102\u010b\7\62\2\2\u0103\u0107\t\4\2\2\u0104"+
		"\u0106\5m\67\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2"+
		"\2\2\u0107\u0108\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107\3\2\2\2\u010a"+
		"\u0102\3\2\2\2\u010a\u0103\3\2\2\2\u010bl\3\2\2\2\u010c\u010d\t\5\2\2"+
		"\u010dn\3\2\2\2\n\2\u00e1\u00e6\u00ed\u00f3\u00f9\u0107\u010a\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}